options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Normalizer_test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Normalizer_test
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: BLE_sym_length
  id: variable
  parameters:
    comment: ''
    value: '.000001'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 16.0]
    rotation: 0
    state: enabled
- name: F_band
  id: variable
  parameters:
    comment: ''
    value: 2*200000000/336/32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 12.0]
    rotation: 0
    state: true
- name: F_if
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 12.0]
    rotation: 0
    state: true
- name: fd
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '16000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 16.0]
    rotation: 0
    state: enabled
- name: sensitivity
  id: variable
  parameters:
    comment: ''
    value: 2*math.pi*fd/samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 16.0]
    rotation: 0
    state: true
- name: analog_random_source_x_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '2'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '100000'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 220.0]
    rotation: 0
    state: true
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: F_if + F_band/2
    interp: '1'
    low_cutoff_freq: F_if - F_band/2
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: interp_fir_filter_ccc
    width: '1000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 108.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 320.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '1000000'
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/1000000
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 476.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 164.0]
    rotation: 0
    state: true
- name: digital_gfsk_mod_0_0_0
  id: digital_gfsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.5'
    comment: ''
    do_unpack: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: round(BLE_sym_length*samp_rate)
    sensitivity: sensitivity
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 220.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    F_band: F_band
    F_of: F_if
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nThis block is a stand-alone\
      \ block that takes in 1 BLE interferer to test \nnormalizing in band noise capabilities\n\
      \n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Normalizer\"\"\"\n\n    def __init__(self, sampling_rate = 32000, F_band =\
      \ 30000, F_of = 0):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        \n        gr.sync_block.__init__(\n\
      \            self,\n            name='Normalizer',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.sampling_rate\
      \ = sampling_rate\n        self.F_of = F_of\n        BW = F_band\n\n       \
      \ #generate normalizer gain from LUT\n        file_path = '/home/samnolan/OSLA_research/OSLA/bpsk/interference/MATLAB/BLEwaveform/BLE_PSD.csv'\n\
      \n        try:\n            PSD = np.genfromtxt(file_path,delimiter=',', dtype=np.double)\n\
      \        except FileNotFoundError:\n            print(f\"Error: File not found\
      \ at {file_path}\")\n\n        fbin_width = 100\n\n        #define gain to have\
      \ normalized in band power\n        #With this gain, we will have normalized\
      \ digital power and receive ~Pr that we measured\n        PSD_i_low  = int(np.round((len(PSD)//2)\
      \ - 1 + (F_of//fbin_width) - ((BW/fbin_width)//2)-25))\n        PSD_i_high =\
      \ int(np.round((len(PSD)//2) - 1 + (F_of//fbin_width) + ((BW/fbin_width)//2)+25))\
      \    \n\n        self.G = np.sqrt(1/(fbin_width*np.sum(PSD[PSD_i_low:PSD_i_high,0])))\n\
      \n    def work(self, input_items, output_items):\n        output_items[0][:]\
      \ = self.G*input_items[0]\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sampling_rate: samp_rate
  states:
    _io_cache: ('Normalizer', 'blk', [('sampling_rate', '32000'), ('F_band', '30000'),
      ('F_of', '0')], [('0', 'complex', 1)], [('0', 'complex', 1)], 'Normalizer',
      ['F_of', 'sampling_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 228.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 16.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 516.0]
    rotation: 0
    state: true

connections:
- [analog_random_source_x_0, '0', digital_gfsk_mod_0_0_0, '0']
- [band_pass_filter_0, '0', blocks_complex_to_mag_squared_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_moving_average_xx_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_throttle_0_0, '0', band_pass_filter_0, '0']
- [digital_gfsk_mod_0_0_0, '0', epy_block_0, '0']
- [epy_block_0, '0', blocks_throttle_0_0, '0']

metadata:
  file_format: 1
